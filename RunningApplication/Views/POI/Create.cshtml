@model BO.PointOfInterest
@using BO;

@{
    ViewBag.Title = "Create";
    List<TypePOI> listTypesPOI = ViewBag.typesPOI;
    List<PointOfInterest> listPOIs = ViewBag.pois;
    int courseID = ViewBag.courseID;
    bool isOrder = ViewBag.isOrder;
}

<h2>Add all Point of interest of your course</h2>

<link rel='stylesheet' href='https://unpkg.com/leaflet@1.4.0/dist/leaflet.css' integrity='sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA==' crossorigin='' />
<script src='https://unpkg.com/leaflet@1.4.0/dist/leaflet.js' integrity='sha512-QVftwZFqvtRNi0ZyCtsznlKSWOStnDORoefr1enyq5mVL4tmKB3S/EnC3rRJcxCPavG10IcrVGSmPh6Qw5lwrg==' crossorigin=''></script>

<div class="row">
    <div class="col-md-6">
        <div id='mapid' style='height: 320px; width: auto;'></div>
        <script>
            function onMapClick(e) {
                $("#latitude").val(e.latlng.lat);
                $("#longitude").val(e.latlng.lng)
                //var marker = L.marker([e.latlng.lat, e.latlng.ln]).addTo(mymap);
                //popup
                //    .setLatLng(e.latlng)
                //    .setContent("You clicked the map at " + e.latlng.toString())
                //   .openOn(mymap);
                //marker.remove(mymap);
            }

            var points = [
                @foreach(var p in listPOIs)
                {
                    @:['@p.TypePOI.ID', '@p.Latitude.ToString()', '@p.Longitude.ToString()'],
                }];

            var traits = [
                @foreach(var p in listPOIs)
                {
                    @:['@p.Latitude.ToString()','@p.Longitude.ToString()'],
                }
            ]
            if (points.length > 0) {
                var mymap = L.map('mapid').setView([parseFloat(points[0][1]), parseFloat(points[0][2])], 13);
            } else {
                var mymap = L.map('mapid').setView([46.227638, 2.352926], 5);
            }
            
            L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
                maxZoom: 18,
                id: 'mapbox.streets',
                accessToken: 'pk.eyJ1IjoiYXhlbGxlZmV2cmUxNCIsImEiOiJjanMzMmQ5ZDYwczZ4NDNrdmlxOXI5cnJwIn0.R9GWUwTVAZuQJEmfd3PzNA'
            }).addTo(mymap);

            var countCP = 1;
            var countSZ = 1;
            for (var i = 0; i < points.length; i++) {
                var marker = L.marker([parseFloat(points[i][1]), parseFloat(points[i][2])]).addTo(mymap);
                if (points[i][0] == 1) {
                    marker.bindPopup("<b>Start</b>").openPopup();
                } else if (points[i][0] == 2) {
                    marker.bindPopup("<b>End</b>").openPopup();
                } else if (points[i][0] == 3) {
                    marker.bindPopup("<b>Checkpoint n° </b> " + countCP).openPopup();
                    countCP++;
                } else if (points[i][0] == 4) {
                    marker.bindPopup("<b>Supply zone n° </b> " + countSZ).openPopup();
                    countSZ++;
                }
            }

            var polyline = L.polyline([traits], { color: '#4285f4' }).addTo(mymap);
            mymap.fitBounds(polyline.getBounds());

            var popup = L.popup();

            mymap.on('click', onMapClick);
        </script>
    </div>
    <div class="col-md-6">
        @using (Html.BeginForm())
            {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                @if (isOrder)
                {
                    <p class="danger">This order is already used</p>
                }
                <div class="form-group">
                    @Html.LabelFor(model => model.OrderPOI, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OrderPOI, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.OrderPOI, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control", @id = "latitude" } })
                        @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @class = "form-control", @id = "longitude" } })
                        @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
                    </div>
                </div>

                @Html.Hidden("CourseID", courseID)

                <div class="form-group">
                    @Html.LabelFor(model => model.TypePOIID, "TypePOIID", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.TypePOIID, listTypesPOI.Select(item => new SelectListItem() { Text = item.Label, Value = item.ID.ToString() }), htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TypePOIID, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="row">
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.OrderPOI)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Latitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Longitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TypePOI.Label)
            </th>
            <th></th>
        </tr>

        @foreach (var item in listPOIs)
            {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.OrderPOI)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Latitude)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Longitude)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TypePOI.Label)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                    @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.ID })
                </td>
            </tr>
        }
    </table>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}